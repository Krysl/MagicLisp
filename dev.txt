/*
cmd  解析函数及其参数并执行
int  参数格式化
char 参数格式化
str  参数格式化
defun  定义 函数（有名执行链表）

有名执行链表 不需要释放链表内存
无名执行链表 通常作为函数参数 需要释放内存

函数 分为两类：
1、叶子 二进制程序
2、树枝 捆绑叶子的树枝

函数的参数，可以是立即数、立即数指针、立即数存储块指针、树枝

树枝的合并、拆分、销毁、创建

从源代码文本文件构造程序

命令行解析方法：
1、数字开头的为int，0x1234之类为十六进制uint32，0b1011为二进制uint32，其他类型用转换函数例如a2uchar("255")
2、`开头的为有名变量
3、函数名左边必定有且只有一个“(”，多个“(”表示(fun arg...)返回值为函数指针，再当作函数执行
4、若函数的参数为需要执行的函数的返回值，同3，也需要加括号
5、若函数的参数为常量，则参数标记为0；若为变量，则调用变量取值函数
6、函数参数不够，但遇到了“)”，则剩余参数值默认为0，暂不支持其他默认值
7、一旦遇到一个“(”则创建一个函数结点（根括号则暂时添加到全局工作队列，子括号则添加到父函数指针或参数指针数
   组），右侧第一个字符串必定当作函数名，（暂时）如果是数字、右括号则报错，如果是某个函数返回值但却不是函
   数指针则事态严重异常

计划
无名树枝构造及其自动销毁                构造完成、树枝销毁未完成、参数销毁未完成
参数解析 函数、直接数区分 参数赋予
命令行能执行以函数为参数的函数          基本完成

//*//*/
20
( + ( + 2 3 ) ( + 4 ( + 5 6 ) ) )
10
( + ( + 1 2 ) ( + 3 4 ) )

( + 1 2 ) ( + 3 4 )

( / ( + 3 7 ) ( - 5 3 ) )

( * ( + 3 7 ) ( - 5 3 ) )

//引用运算符 `( 作用是把branch不当做执行树而是某个具体值 以供以后调用eval来执行
( var br 8 `( * ( + 3 7 ) ( - 5 3 ) ) )
x ( var br 8 ( * ( + 3 7 ) ( - 5 3 ) ) )
//branch执行函数 eval
( eval ( varg br ) )

( var br 8 `( * ( + 3 7 ) ( - 5 3 ) ) ) ( eval ( varg br ) )

//编译期执行引用运算符 `,( 作用是将后面的执行结果作为参数值
( var br 8 `( * ( + 3 7 ) ( - 5 3 ) ) )
( var br2 8 `( + `,( eval ( varg br ) ) `,( eval ( varg br ) ) ) )
( eval ( varg br2 ) )

( var a 3 4 )
( varg a )
( vars a 5 )
( varg a )


( var_show_all )

//branch 有参函数
//branch 有参函数初始化参数
( var a 3 4 ) ( var b 3 4 )
//branch 有参函数 定义
( var sum_of_squares 8 `( + ( * `,( varg a ) `,( varg a ) ) ( * `,( varg b ) `,( varg b ) ) ) )
//branch 有参函数 执行
( eval ( varg sum_of_squares ) )
( vars b 5 )
( varg b )
( vars a 5 )
( varg a )
( ``( eval ( varg a ) ) )


( var_show_all )

( var a 3 4 ) ( var b 3 4 )
( var sum_of_squares 8 `( + ( * `,( varg a ) `,( varg a ) ) ( * `,( varg b ) `,( varg b ) ) ) )
( eval ( varg sum_of_squares ) )

( var a 3 4 ) ( var b 3 4 ) ( var sum_of_squares 8 `( + ( * `,( varg a ) `,( varg a ) ) ( * `,( varg b ) `,( varg b ) ) ) ) ( eval ( varg sum_of_squares ) )
will be wrong!!!   `( var a 3 4 ) `( var b 3 4 ) `( var sum_of_squares 8 `( + ( * `,( varg a ) `,( varg a ) ) ( * `,( varg b ) `,( varg b ) ) ) ) `( eval ( varg sum_of_squares ) )
`,( var a 3 4 ) `,( var b 3 4 ) `,( var sum_of_squares 8 `( + ( * `,( varg a ) `,( varg a ) ) ( * `,( varg b ) `,( varg b ) ) ) ) `,( eval ( varg sum_of_squares ) )
,( var a 3 4 ) ,( var b 3 4 ) ,( var sum_of_squares 8 `( + ( * `,( varg a ) `,( varg a ) ) ( * `,( varg b ) `,( varg b ) ) ) ) ,( eval ( varg sum_of_squares ) )



